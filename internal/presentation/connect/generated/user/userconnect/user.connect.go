// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: string_phone/user/user.proto

package userconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	user "github.com/string-phone/proto/string_phone/user"
	rpc "github.com/string-phone/proto/string_phone/user/rpc"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "string_phone.user.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceGetPhoneNumberProcedure is the fully-qualified name of the UserService's
	// GetPhoneNumber RPC.
	UserServiceGetPhoneNumberProcedure = "/string_phone.user.UserService/GetPhoneNumber"
	// UserServiceRegisterPhoneProcedure is the fully-qualified name of the UserService's RegisterPhone
	// RPC.
	UserServiceRegisterPhoneProcedure = "/string_phone.user.UserService/RegisterPhone"
	// UserServiceGetUserProcedure is the fully-qualified name of the UserService's GetUser RPC.
	UserServiceGetUserProcedure = "/string_phone.user.UserService/GetUser"
)

// UserServiceClient is a client for the string_phone.user.UserService service.
type UserServiceClient interface {
	GetPhoneNumber(context.Context, *connect.Request[rpc.GetPhoneNumberRequest]) (*connect.Response[rpc.GetPhoneNumberResponse], error)
	RegisterPhone(context.Context, *connect.Request[rpc.RegisterPhoneRequest]) (*connect.Response[rpc.RegisterPhoneResponse], error)
	GetUser(context.Context, *connect.Request[rpc.GetUserRequest]) (*connect.Response[rpc.GetUserResponse], error)
}

// NewUserServiceClient constructs a client for the string_phone.user.UserService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := user.File_string_phone_user_user_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		getPhoneNumber: connect.NewClient[rpc.GetPhoneNumberRequest, rpc.GetPhoneNumberResponse](
			httpClient,
			baseURL+UserServiceGetPhoneNumberProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetPhoneNumber")),
			connect.WithClientOptions(opts...),
		),
		registerPhone: connect.NewClient[rpc.RegisterPhoneRequest, rpc.RegisterPhoneResponse](
			httpClient,
			baseURL+UserServiceRegisterPhoneProcedure,
			connect.WithSchema(userServiceMethods.ByName("RegisterPhone")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[rpc.GetUserRequest, rpc.GetUserResponse](
			httpClient,
			baseURL+UserServiceGetUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	getPhoneNumber *connect.Client[rpc.GetPhoneNumberRequest, rpc.GetPhoneNumberResponse]
	registerPhone  *connect.Client[rpc.RegisterPhoneRequest, rpc.RegisterPhoneResponse]
	getUser        *connect.Client[rpc.GetUserRequest, rpc.GetUserResponse]
}

// GetPhoneNumber calls string_phone.user.UserService.GetPhoneNumber.
func (c *userServiceClient) GetPhoneNumber(ctx context.Context, req *connect.Request[rpc.GetPhoneNumberRequest]) (*connect.Response[rpc.GetPhoneNumberResponse], error) {
	return c.getPhoneNumber.CallUnary(ctx, req)
}

// RegisterPhone calls string_phone.user.UserService.RegisterPhone.
func (c *userServiceClient) RegisterPhone(ctx context.Context, req *connect.Request[rpc.RegisterPhoneRequest]) (*connect.Response[rpc.RegisterPhoneResponse], error) {
	return c.registerPhone.CallUnary(ctx, req)
}

// GetUser calls string_phone.user.UserService.GetUser.
func (c *userServiceClient) GetUser(ctx context.Context, req *connect.Request[rpc.GetUserRequest]) (*connect.Response[rpc.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the string_phone.user.UserService service.
type UserServiceHandler interface {
	GetPhoneNumber(context.Context, *connect.Request[rpc.GetPhoneNumberRequest]) (*connect.Response[rpc.GetPhoneNumberResponse], error)
	RegisterPhone(context.Context, *connect.Request[rpc.RegisterPhoneRequest]) (*connect.Response[rpc.RegisterPhoneResponse], error)
	GetUser(context.Context, *connect.Request[rpc.GetUserRequest]) (*connect.Response[rpc.GetUserResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := user.File_string_phone_user_user_proto.Services().ByName("UserService").Methods()
	userServiceGetPhoneNumberHandler := connect.NewUnaryHandler(
		UserServiceGetPhoneNumberProcedure,
		svc.GetPhoneNumber,
		connect.WithSchema(userServiceMethods.ByName("GetPhoneNumber")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceRegisterPhoneHandler := connect.NewUnaryHandler(
		UserServiceRegisterPhoneProcedure,
		svc.RegisterPhone,
		connect.WithSchema(userServiceMethods.ByName("RegisterPhone")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserHandler := connect.NewUnaryHandler(
		UserServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(userServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	return "/string_phone.user.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceGetPhoneNumberProcedure:
			userServiceGetPhoneNumberHandler.ServeHTTP(w, r)
		case UserServiceRegisterPhoneProcedure:
			userServiceRegisterPhoneHandler.ServeHTTP(w, r)
		case UserServiceGetUserProcedure:
			userServiceGetUserHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) GetPhoneNumber(context.Context, *connect.Request[rpc.GetPhoneNumberRequest]) (*connect.Response[rpc.GetPhoneNumberResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("string_phone.user.UserService.GetPhoneNumber is not implemented"))
}

func (UnimplementedUserServiceHandler) RegisterPhone(context.Context, *connect.Request[rpc.RegisterPhoneRequest]) (*connect.Response[rpc.RegisterPhoneResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("string_phone.user.UserService.RegisterPhone is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUser(context.Context, *connect.Request[rpc.GetUserRequest]) (*connect.Response[rpc.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("string_phone.user.UserService.GetUser is not implemented"))
}
