// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: string_phone/strings/string.proto

package stringsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	strings1 "github.com/K-Kizuku/ito-denwa/internal/presentation/connect/generated/strings"
	rpc "github.com/K-Kizuku/ito-denwa/internal/presentation/connect/generated/strings/rpc"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StringItemServiceName is the fully-qualified name of the StringItemService service.
	StringItemServiceName = "string_phone.strings.StringItemService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StringItemServiceGetTemplateStringsProcedure is the fully-qualified name of the
	// StringItemService's GetTemplateStrings RPC.
	StringItemServiceGetTemplateStringsProcedure = "/string_phone.strings.StringItemService/GetTemplateStrings"
	// StringItemServiceGetStringsProcedure is the fully-qualified name of the StringItemService's
	// GetStrings RPC.
	StringItemServiceGetStringsProcedure = "/string_phone.strings.StringItemService/GetStrings"
	// StringItemServiceBuyStringProcedure is the fully-qualified name of the StringItemService's
	// BuyString RPC.
	StringItemServiceBuyStringProcedure = "/string_phone.strings.StringItemService/BuyString"
)

// StringItemServiceClient is a client for the string_phone.strings.StringItemService service.
type StringItemServiceClient interface {
	GetTemplateStrings(context.Context, *connect.Request[rpc.GetTemplateStringsRequest]) (*connect.Response[rpc.GetTemplateStringsResponse], error)
	GetStrings(context.Context, *connect.Request[rpc.GetStringsRequest]) (*connect.Response[rpc.GetStringsResponse], error)
	BuyString(context.Context, *connect.Request[rpc.BuyStringRequest]) (*connect.Response[rpc.BuyStringResponse], error)
}

// NewStringItemServiceClient constructs a client for the string_phone.strings.StringItemService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStringItemServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StringItemServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	stringItemServiceMethods := strings1.File_string_phone_strings_string_proto.Services().ByName("StringItemService").Methods()
	return &stringItemServiceClient{
		getTemplateStrings: connect.NewClient[rpc.GetTemplateStringsRequest, rpc.GetTemplateStringsResponse](
			httpClient,
			baseURL+StringItemServiceGetTemplateStringsProcedure,
			connect.WithSchema(stringItemServiceMethods.ByName("GetTemplateStrings")),
			connect.WithClientOptions(opts...),
		),
		getStrings: connect.NewClient[rpc.GetStringsRequest, rpc.GetStringsResponse](
			httpClient,
			baseURL+StringItemServiceGetStringsProcedure,
			connect.WithSchema(stringItemServiceMethods.ByName("GetStrings")),
			connect.WithClientOptions(opts...),
		),
		buyString: connect.NewClient[rpc.BuyStringRequest, rpc.BuyStringResponse](
			httpClient,
			baseURL+StringItemServiceBuyStringProcedure,
			connect.WithSchema(stringItemServiceMethods.ByName("BuyString")),
			connect.WithClientOptions(opts...),
		),
	}
}

// stringItemServiceClient implements StringItemServiceClient.
type stringItemServiceClient struct {
	getTemplateStrings *connect.Client[rpc.GetTemplateStringsRequest, rpc.GetTemplateStringsResponse]
	getStrings         *connect.Client[rpc.GetStringsRequest, rpc.GetStringsResponse]
	buyString          *connect.Client[rpc.BuyStringRequest, rpc.BuyStringResponse]
}

// GetTemplateStrings calls string_phone.strings.StringItemService.GetTemplateStrings.
func (c *stringItemServiceClient) GetTemplateStrings(ctx context.Context, req *connect.Request[rpc.GetTemplateStringsRequest]) (*connect.Response[rpc.GetTemplateStringsResponse], error) {
	return c.getTemplateStrings.CallUnary(ctx, req)
}

// GetStrings calls string_phone.strings.StringItemService.GetStrings.
func (c *stringItemServiceClient) GetStrings(ctx context.Context, req *connect.Request[rpc.GetStringsRequest]) (*connect.Response[rpc.GetStringsResponse], error) {
	return c.getStrings.CallUnary(ctx, req)
}

// BuyString calls string_phone.strings.StringItemService.BuyString.
func (c *stringItemServiceClient) BuyString(ctx context.Context, req *connect.Request[rpc.BuyStringRequest]) (*connect.Response[rpc.BuyStringResponse], error) {
	return c.buyString.CallUnary(ctx, req)
}

// StringItemServiceHandler is an implementation of the string_phone.strings.StringItemService
// service.
type StringItemServiceHandler interface {
	GetTemplateStrings(context.Context, *connect.Request[rpc.GetTemplateStringsRequest]) (*connect.Response[rpc.GetTemplateStringsResponse], error)
	GetStrings(context.Context, *connect.Request[rpc.GetStringsRequest]) (*connect.Response[rpc.GetStringsResponse], error)
	BuyString(context.Context, *connect.Request[rpc.BuyStringRequest]) (*connect.Response[rpc.BuyStringResponse], error)
}

// NewStringItemServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStringItemServiceHandler(svc StringItemServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	stringItemServiceMethods := strings1.File_string_phone_strings_string_proto.Services().ByName("StringItemService").Methods()
	stringItemServiceGetTemplateStringsHandler := connect.NewUnaryHandler(
		StringItemServiceGetTemplateStringsProcedure,
		svc.GetTemplateStrings,
		connect.WithSchema(stringItemServiceMethods.ByName("GetTemplateStrings")),
		connect.WithHandlerOptions(opts...),
	)
	stringItemServiceGetStringsHandler := connect.NewUnaryHandler(
		StringItemServiceGetStringsProcedure,
		svc.GetStrings,
		connect.WithSchema(stringItemServiceMethods.ByName("GetStrings")),
		connect.WithHandlerOptions(opts...),
	)
	stringItemServiceBuyStringHandler := connect.NewUnaryHandler(
		StringItemServiceBuyStringProcedure,
		svc.BuyString,
		connect.WithSchema(stringItemServiceMethods.ByName("BuyString")),
		connect.WithHandlerOptions(opts...),
	)
	return "/string_phone.strings.StringItemService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StringItemServiceGetTemplateStringsProcedure:
			stringItemServiceGetTemplateStringsHandler.ServeHTTP(w, r)
		case StringItemServiceGetStringsProcedure:
			stringItemServiceGetStringsHandler.ServeHTTP(w, r)
		case StringItemServiceBuyStringProcedure:
			stringItemServiceBuyStringHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStringItemServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStringItemServiceHandler struct{}

func (UnimplementedStringItemServiceHandler) GetTemplateStrings(context.Context, *connect.Request[rpc.GetTemplateStringsRequest]) (*connect.Response[rpc.GetTemplateStringsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("string_phone.strings.StringItemService.GetTemplateStrings is not implemented"))
}

func (UnimplementedStringItemServiceHandler) GetStrings(context.Context, *connect.Request[rpc.GetStringsRequest]) (*connect.Response[rpc.GetStringsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("string_phone.strings.StringItemService.GetStrings is not implemented"))
}

func (UnimplementedStringItemServiceHandler) BuyString(context.Context, *connect.Request[rpc.BuyStringRequest]) (*connect.Response[rpc.BuyStringResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("string_phone.strings.StringItemService.BuyString is not implemented"))
}
