// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: string_phone/cards/card.proto

package cardsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	cards "github.com/string-phone/proto/string_phone/cards"
	rpc "github.com/string-phone/proto/string_phone/cards/rpc"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CardServiceName is the fully-qualified name of the CardService service.
	CardServiceName = "string_phone.cards.CardService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CardServiceGetTemplateCardsProcedure is the fully-qualified name of the CardService's
	// GetTemplateCards RPC.
	CardServiceGetTemplateCardsProcedure = "/string_phone.cards.CardService/GetTemplateCards"
	// CardServiceGetCardsProcedure is the fully-qualified name of the CardService's GetCards RPC.
	CardServiceGetCardsProcedure = "/string_phone.cards.CardService/GetCards"
	// CardServiceBuyCardProcedure is the fully-qualified name of the CardService's BuyCard RPC.
	CardServiceBuyCardProcedure = "/string_phone.cards.CardService/BuyCard"
)

// CardServiceClient is a client for the string_phone.cards.CardService service.
type CardServiceClient interface {
	GetTemplateCards(context.Context, *connect.Request[rpc.GetTemplateCardsRequest]) (*connect.Response[rpc.GetTemplateCardsResponse], error)
	GetCards(context.Context, *connect.Request[rpc.GetCardsRequest]) (*connect.Response[rpc.GetCardsResponse], error)
	BuyCard(context.Context, *connect.Request[rpc.BuyCardRequest]) (*connect.Response[rpc.BuyCardResponse], error)
}

// NewCardServiceClient constructs a client for the string_phone.cards.CardService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCardServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CardServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	cardServiceMethods := cards.File_string_phone_cards_card_proto.Services().ByName("CardService").Methods()
	return &cardServiceClient{
		getTemplateCards: connect.NewClient[rpc.GetTemplateCardsRequest, rpc.GetTemplateCardsResponse](
			httpClient,
			baseURL+CardServiceGetTemplateCardsProcedure,
			connect.WithSchema(cardServiceMethods.ByName("GetTemplateCards")),
			connect.WithClientOptions(opts...),
		),
		getCards: connect.NewClient[rpc.GetCardsRequest, rpc.GetCardsResponse](
			httpClient,
			baseURL+CardServiceGetCardsProcedure,
			connect.WithSchema(cardServiceMethods.ByName("GetCards")),
			connect.WithClientOptions(opts...),
		),
		buyCard: connect.NewClient[rpc.BuyCardRequest, rpc.BuyCardResponse](
			httpClient,
			baseURL+CardServiceBuyCardProcedure,
			connect.WithSchema(cardServiceMethods.ByName("BuyCard")),
			connect.WithClientOptions(opts...),
		),
	}
}

// cardServiceClient implements CardServiceClient.
type cardServiceClient struct {
	getTemplateCards *connect.Client[rpc.GetTemplateCardsRequest, rpc.GetTemplateCardsResponse]
	getCards         *connect.Client[rpc.GetCardsRequest, rpc.GetCardsResponse]
	buyCard          *connect.Client[rpc.BuyCardRequest, rpc.BuyCardResponse]
}

// GetTemplateCards calls string_phone.cards.CardService.GetTemplateCards.
func (c *cardServiceClient) GetTemplateCards(ctx context.Context, req *connect.Request[rpc.GetTemplateCardsRequest]) (*connect.Response[rpc.GetTemplateCardsResponse], error) {
	return c.getTemplateCards.CallUnary(ctx, req)
}

// GetCards calls string_phone.cards.CardService.GetCards.
func (c *cardServiceClient) GetCards(ctx context.Context, req *connect.Request[rpc.GetCardsRequest]) (*connect.Response[rpc.GetCardsResponse], error) {
	return c.getCards.CallUnary(ctx, req)
}

// BuyCard calls string_phone.cards.CardService.BuyCard.
func (c *cardServiceClient) BuyCard(ctx context.Context, req *connect.Request[rpc.BuyCardRequest]) (*connect.Response[rpc.BuyCardResponse], error) {
	return c.buyCard.CallUnary(ctx, req)
}

// CardServiceHandler is an implementation of the string_phone.cards.CardService service.
type CardServiceHandler interface {
	GetTemplateCards(context.Context, *connect.Request[rpc.GetTemplateCardsRequest]) (*connect.Response[rpc.GetTemplateCardsResponse], error)
	GetCards(context.Context, *connect.Request[rpc.GetCardsRequest]) (*connect.Response[rpc.GetCardsResponse], error)
	BuyCard(context.Context, *connect.Request[rpc.BuyCardRequest]) (*connect.Response[rpc.BuyCardResponse], error)
}

// NewCardServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCardServiceHandler(svc CardServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cardServiceMethods := cards.File_string_phone_cards_card_proto.Services().ByName("CardService").Methods()
	cardServiceGetTemplateCardsHandler := connect.NewUnaryHandler(
		CardServiceGetTemplateCardsProcedure,
		svc.GetTemplateCards,
		connect.WithSchema(cardServiceMethods.ByName("GetTemplateCards")),
		connect.WithHandlerOptions(opts...),
	)
	cardServiceGetCardsHandler := connect.NewUnaryHandler(
		CardServiceGetCardsProcedure,
		svc.GetCards,
		connect.WithSchema(cardServiceMethods.ByName("GetCards")),
		connect.WithHandlerOptions(opts...),
	)
	cardServiceBuyCardHandler := connect.NewUnaryHandler(
		CardServiceBuyCardProcedure,
		svc.BuyCard,
		connect.WithSchema(cardServiceMethods.ByName("BuyCard")),
		connect.WithHandlerOptions(opts...),
	)
	return "/string_phone.cards.CardService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CardServiceGetTemplateCardsProcedure:
			cardServiceGetTemplateCardsHandler.ServeHTTP(w, r)
		case CardServiceGetCardsProcedure:
			cardServiceGetCardsHandler.ServeHTTP(w, r)
		case CardServiceBuyCardProcedure:
			cardServiceBuyCardHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCardServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCardServiceHandler struct{}

func (UnimplementedCardServiceHandler) GetTemplateCards(context.Context, *connect.Request[rpc.GetTemplateCardsRequest]) (*connect.Response[rpc.GetTemplateCardsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("string_phone.cards.CardService.GetTemplateCards is not implemented"))
}

func (UnimplementedCardServiceHandler) GetCards(context.Context, *connect.Request[rpc.GetCardsRequest]) (*connect.Response[rpc.GetCardsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("string_phone.cards.CardService.GetCards is not implemented"))
}

func (UnimplementedCardServiceHandler) BuyCard(context.Context, *connect.Request[rpc.BuyCardRequest]) (*connect.Response[rpc.BuyCardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("string_phone.cards.CardService.BuyCard is not implemented"))
}
