// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: string_phone/cards/card.proto

package cardsconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	cards "github.com/string-phone/proto/string_phone/cards"
	rpc "github.com/string-phone/proto/string_phone/cards/rpc"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StringItemServiceName is the fully-qualified name of the StringItemService service.
	StringItemServiceName = "string_phone.cards.StringItemService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StringItemServiceGetTemplateCardsProcedure is the fully-qualified name of the StringItemService's
	// GetTemplateCards RPC.
	StringItemServiceGetTemplateCardsProcedure = "/string_phone.cards.StringItemService/GetTemplateCards"
	// StringItemServiceGetCardsProcedure is the fully-qualified name of the StringItemService's
	// GetCards RPC.
	StringItemServiceGetCardsProcedure = "/string_phone.cards.StringItemService/GetCards"
	// StringItemServiceBuyCardProcedure is the fully-qualified name of the StringItemService's BuyCard
	// RPC.
	StringItemServiceBuyCardProcedure = "/string_phone.cards.StringItemService/BuyCard"
)

// StringItemServiceClient is a client for the string_phone.cards.StringItemService service.
type StringItemServiceClient interface {
	GetTemplateCards(context.Context, *connect.Request[rpc.GetTemplateCardsRequest]) (*connect.Response[rpc.GetTemplateCardsResponse], error)
	GetCards(context.Context, *connect.Request[rpc.GetCardsRequest]) (*connect.Response[rpc.GetCardsResponse], error)
	BuyCard(context.Context, *connect.Request[rpc.BuyCardRequest]) (*connect.Response[rpc.BuyCardResponse], error)
}

// NewStringItemServiceClient constructs a client for the string_phone.cards.StringItemService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStringItemServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StringItemServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	stringItemServiceMethods := cards.File_string_phone_cards_card_proto.Services().ByName("StringItemService").Methods()
	return &stringItemServiceClient{
		getTemplateCards: connect.NewClient[rpc.GetTemplateCardsRequest, rpc.GetTemplateCardsResponse](
			httpClient,
			baseURL+StringItemServiceGetTemplateCardsProcedure,
			connect.WithSchema(stringItemServiceMethods.ByName("GetTemplateCards")),
			connect.WithClientOptions(opts...),
		),
		getCards: connect.NewClient[rpc.GetCardsRequest, rpc.GetCardsResponse](
			httpClient,
			baseURL+StringItemServiceGetCardsProcedure,
			connect.WithSchema(stringItemServiceMethods.ByName("GetCards")),
			connect.WithClientOptions(opts...),
		),
		buyCard: connect.NewClient[rpc.BuyCardRequest, rpc.BuyCardResponse](
			httpClient,
			baseURL+StringItemServiceBuyCardProcedure,
			connect.WithSchema(stringItemServiceMethods.ByName("BuyCard")),
			connect.WithClientOptions(opts...),
		),
	}
}

// stringItemServiceClient implements StringItemServiceClient.
type stringItemServiceClient struct {
	getTemplateCards *connect.Client[rpc.GetTemplateCardsRequest, rpc.GetTemplateCardsResponse]
	getCards         *connect.Client[rpc.GetCardsRequest, rpc.GetCardsResponse]
	buyCard          *connect.Client[rpc.BuyCardRequest, rpc.BuyCardResponse]
}

// GetTemplateCards calls string_phone.cards.StringItemService.GetTemplateCards.
func (c *stringItemServiceClient) GetTemplateCards(ctx context.Context, req *connect.Request[rpc.GetTemplateCardsRequest]) (*connect.Response[rpc.GetTemplateCardsResponse], error) {
	return c.getTemplateCards.CallUnary(ctx, req)
}

// GetCards calls string_phone.cards.StringItemService.GetCards.
func (c *stringItemServiceClient) GetCards(ctx context.Context, req *connect.Request[rpc.GetCardsRequest]) (*connect.Response[rpc.GetCardsResponse], error) {
	return c.getCards.CallUnary(ctx, req)
}

// BuyCard calls string_phone.cards.StringItemService.BuyCard.
func (c *stringItemServiceClient) BuyCard(ctx context.Context, req *connect.Request[rpc.BuyCardRequest]) (*connect.Response[rpc.BuyCardResponse], error) {
	return c.buyCard.CallUnary(ctx, req)
}

// StringItemServiceHandler is an implementation of the string_phone.cards.StringItemService
// service.
type StringItemServiceHandler interface {
	GetTemplateCards(context.Context, *connect.Request[rpc.GetTemplateCardsRequest]) (*connect.Response[rpc.GetTemplateCardsResponse], error)
	GetCards(context.Context, *connect.Request[rpc.GetCardsRequest]) (*connect.Response[rpc.GetCardsResponse], error)
	BuyCard(context.Context, *connect.Request[rpc.BuyCardRequest]) (*connect.Response[rpc.BuyCardResponse], error)
}

// NewStringItemServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStringItemServiceHandler(svc StringItemServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	stringItemServiceMethods := cards.File_string_phone_cards_card_proto.Services().ByName("StringItemService").Methods()
	stringItemServiceGetTemplateCardsHandler := connect.NewUnaryHandler(
		StringItemServiceGetTemplateCardsProcedure,
		svc.GetTemplateCards,
		connect.WithSchema(stringItemServiceMethods.ByName("GetTemplateCards")),
		connect.WithHandlerOptions(opts...),
	)
	stringItemServiceGetCardsHandler := connect.NewUnaryHandler(
		StringItemServiceGetCardsProcedure,
		svc.GetCards,
		connect.WithSchema(stringItemServiceMethods.ByName("GetCards")),
		connect.WithHandlerOptions(opts...),
	)
	stringItemServiceBuyCardHandler := connect.NewUnaryHandler(
		StringItemServiceBuyCardProcedure,
		svc.BuyCard,
		connect.WithSchema(stringItemServiceMethods.ByName("BuyCard")),
		connect.WithHandlerOptions(opts...),
	)
	return "/string_phone.cards.StringItemService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StringItemServiceGetTemplateCardsProcedure:
			stringItemServiceGetTemplateCardsHandler.ServeHTTP(w, r)
		case StringItemServiceGetCardsProcedure:
			stringItemServiceGetCardsHandler.ServeHTTP(w, r)
		case StringItemServiceBuyCardProcedure:
			stringItemServiceBuyCardHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStringItemServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedStringItemServiceHandler struct{}

func (UnimplementedStringItemServiceHandler) GetTemplateCards(context.Context, *connect.Request[rpc.GetTemplateCardsRequest]) (*connect.Response[rpc.GetTemplateCardsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("string_phone.cards.StringItemService.GetTemplateCards is not implemented"))
}

func (UnimplementedStringItemServiceHandler) GetCards(context.Context, *connect.Request[rpc.GetCardsRequest]) (*connect.Response[rpc.GetCardsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("string_phone.cards.StringItemService.GetCards is not implemented"))
}

func (UnimplementedStringItemServiceHandler) BuyCard(context.Context, *connect.Request[rpc.BuyCardRequest]) (*connect.Response[rpc.BuyCardResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("string_phone.cards.StringItemService.BuyCard is not implemented"))
}
